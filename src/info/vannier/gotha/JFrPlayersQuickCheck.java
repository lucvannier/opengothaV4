/*
 * JFrPlayersQuickCheck.java
 */

package info.vannier.gotha;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.*;

/**
 *
 * @author  Administrateur
 */
public class JFrPlayersQuickCheck extends javax.swing.JFrame{
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;

    public  static final int REG_COL = 0;
    private static final int NAME_COL = 1;
    private static final int FIRSTNAME_COL = 2;
    private static final int COUNTRY_COL = 3;
    private static final int CLUB_COL = 4;
    public static final int RANK_COL = 5;
    public static final int RATING_COL = 6;
    public static final int PARTICIPATING_COL0 = 7;
    public static final int MAX_NUMBER_OF_ROUNDS_DISPLAYED = 7;
    
    private int playersSortType = PlayerComparator.NAME_ORDER;
    private ArrayList<Player> alSelectedPlayersToKeepSelected = new ArrayList<Player>(); 

    private TournamentInterface tournament;
    
     private int displayedStartingRoundNumber = 0;
    /**
     * Creates new form JFrPlayersQuickCheck
     */
    public JFrPlayersQuickCheck() {
        initComponents();
        setupRefreshTimer();
    }

    private volatile boolean running = true;
    javax.swing.Timer timer = null;
    private void setupRefreshTimer() {
        ActionListener taskPerformer;
        taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (!running){
                    timer.stop();
                }
                try {
                    if (!tournament.isOpen()) cleanClose();
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrGamesResults.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        timer = new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer);
        timer.start();
    }

    public JFrPlayersQuickCheck(TournamentInterface tournament) throws RemoteException{
        this.tournament = tournament;
        
        initComponents();
        customInitComponents();
        setupRefreshTimer();
    }    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pupRegisteredPlayers = new javax.swing.JPopupMenu();
        mniSortByName = new javax.swing.JMenuItem();
        mniSortByRank = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        mniCancel = new javax.swing.JMenuItem();
        pnlInternal = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        pnlPlayersList = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txfNbPlFin = new javax.swing.JTextField();
        txfNbPlPre = new javax.swing.JTextField();
        scpRegisteredPlayers = new javax.swing.JScrollPane();
        tblRegisteredPlayers = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        lblLastRound = new javax.swing.JLabel();
        spnDisplayedStartingRoundNumber = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnRemovePrePlayers = new javax.swing.JButton();
        btnIncreaseRank = new javax.swing.JButton();
        btnDecreaseRank = new javax.swing.JButton();
        btnSetRegToFin = new javax.swing.JButton();
        btnSetRegToPre = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        btnSetRanksFromRatings = new javax.swing.JButton();
        btnSetRatingsFromRanks = new javax.swing.JButton();
        btnUpdateRatings = new javax.swing.JButton();
        btnModifyRatings = new javax.swing.JButton();

        pupRegisteredPlayers.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        mniSortByName.setText("Sort by name");
        mniSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSortByNameActionPerformed(evt);
            }
        });
        pupRegisteredPlayers.add(mniSortByName);

        mniSortByRank.setText("Sort by rank");
        mniSortByRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSortByRankActionPerformed(evt);
            }
        });
        pupRegisteredPlayers.add(mniSortByRank);
        pupRegisteredPlayers.add(jSeparator5);

        mniCancel.setText("Cancel");
        mniCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCancelActionPerformed(evt);
            }
        });
        pupRegisteredPlayers.add(mniCancel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Players Quick check");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        pnlInternal.setLayout(null);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        pnlInternal.add(btnClose);
        btnClose.setBounds(130, 470, 650, 30);

        pnlPlayersList.setBorder(javax.swing.BorderFactory.createTitledBorder("Players"));
        pnlPlayersList.setLayout(null);

        jLabel8.setText("Registered players. Final (F)");
        pnlPlayersList.add(jLabel8);
        jLabel8.setBounds(60, 50, 250, 20);

        jLabel9.setText("Registered players. Preliminary (P)");
        pnlPlayersList.add(jLabel9);
        jLabel9.setBounds(60, 30, 250, 20);

        txfNbPlFin.setEditable(false);
        txfNbPlFin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txfNbPlFin.setEnabled(false);
        pnlPlayersList.add(txfNbPlFin);
        txfNbPlFin.setBounds(10, 50, 40, 20);

        txfNbPlPre.setEditable(false);
        txfNbPlPre.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txfNbPlPre.setEnabled(false);
        pnlPlayersList.add(txfNbPlPre);
        txfNbPlPre.setBounds(10, 30, 40, 20);

        scpRegisteredPlayers.setToolTipText("");

        tblRegisteredPlayers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, "", "", "", null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "R", "Last name", "First name", "Co", "Club", "Rk", "Rating", "1", "2", "3", "4", "5", "6", "7"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRegisteredPlayers.setToolTipText("To modify, right click !");
        tblRegisteredPlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegisteredPlayersMouseClicked(evt);
            }
        });
        tblRegisteredPlayers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblRegisteredPlayersKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblRegisteredPlayersKeyTyped(evt);
            }
        });
        scpRegisteredPlayers.setViewportView(tblRegisteredPlayers);

        pnlPlayersList.add(scpRegisteredPlayers);
        scpRegisteredPlayers.setBounds(10, 80, 480, 330);

        btnPrint.setText("Print ...");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        pnlPlayersList.add(btnPrint);
        btnPrint.setBounds(10, 420, 480, 30);

        jCheckBox1.setText("jCheckBox1");
        pnlPlayersList.add(jCheckBox1);
        jCheckBox1.setBounds(250, 100, 15, 15);
        jCheckBox1.getAccessibleContext().setAccessibleName("chk1");

        jLabel2.setText("Rounds :");
        pnlPlayersList.add(jLabel2);
        jLabel2.setBounds(340, 50, 60, 14);

        lblLastRound.setText("... 7");
        pnlPlayersList.add(lblLastRound);
        lblLastRound.setBounds(450, 50, 30, 14);

        spnDisplayedStartingRoundNumber.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnDisplayedStartingRoundNumberStateChanged(evt);
            }
        });
        pnlPlayersList.add(spnDisplayedStartingRoundNumber);
        spnDisplayedStartingRoundNumber.setBounds(409, 40, 40, 30);

        jLabel4.setText("Participation");
        pnlPlayersList.add(jLabel4);
        jLabel4.setBounds(340, 20, 110, 14);

        pnlInternal.add(pnlPlayersList);
        pnlPlayersList.setBounds(10, 10, 500, 460);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel1.setText("Action on selected players");
        pnlInternal.add(jLabel1);
        jLabel1.setBounds(520, 180, 220, 14);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("+");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlInternal.add(jLabel6);
        jLabel6.setBounds(520, 280, 20, 20);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("-");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlInternal.add(jLabel10);
        jLabel10.setBounds(520, 310, 20, 20);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("F");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlInternal.add(jLabel13);
        jLabel13.setBounds(520, 200, 20, 20);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("P");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlInternal.add(jLabel16);
        jLabel16.setBounds(520, 230, 20, 20);

        btnRemovePrePlayers.setText("Remove all \"P\" players");
        btnRemovePrePlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePrePlayersActionPerformed(evt);
            }
        });
        pnlInternal.add(btnRemovePrePlayers);
        btnRemovePrePlayers.setBounds(520, 20, 260, 30);

        btnIncreaseRank.setText("Increase rank of selected players");
        btnIncreaseRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncreaseRankActionPerformed(evt);
            }
        });
        pnlInternal.add(btnIncreaseRank);
        btnIncreaseRank.setBounds(550, 280, 230, 20);

        btnDecreaseRank.setText("Decrease rank of selected players");
        btnDecreaseRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecreaseRankActionPerformed(evt);
            }
        });
        pnlInternal.add(btnDecreaseRank);
        btnDecreaseRank.setBounds(550, 310, 230, 20);

        btnSetRegToFin.setText("Set Registration status to Final");
        btnSetRegToFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetRegToFinActionPerformed(evt);
            }
        });
        pnlInternal.add(btnSetRegToFin);
        btnSetRegToFin.setBounds(550, 200, 230, 20);

        btnSetRegToPre.setText("Set Registration status to Preliminary");
        btnSetRegToPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetRegToPreActionPerformed(evt);
            }
        });
        pnlInternal.add(btnSetRegToPre);
        btnSetRegToPre.setBounds(550, 230, 230, 20);

        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.png"))); // NOI18N
        btnHelp.setText("help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        pnlInternal.add(btnHelp);
        btnHelp.setBounds(10, 470, 110, 30);

        btnSetRanksFromRatings.setText("Set ranks according to ratings");
        btnSetRanksFromRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetRanksFromRatingsActionPerformed(evt);
            }
        });
        pnlInternal.add(btnSetRanksFromRatings);
        btnSetRanksFromRatings.setBounds(550, 340, 230, 20);

        btnSetRatingsFromRanks.setText("Set  ratings according to ranks");
        btnSetRatingsFromRanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetRatingsFromRanksActionPerformed(evt);
            }
        });
        pnlInternal.add(btnSetRatingsFromRanks);
        btnSetRatingsFromRanks.setBounds(550, 390, 230, 20);

        btnUpdateRatings.setText("Update ratings");
        btnUpdateRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRatingsActionPerformed(evt);
            }
        });
        pnlInternal.add(btnUpdateRatings);
        btnUpdateRatings.setBounds(520, 70, 260, 30);

        btnModifyRatings.setText("Modify ratings...");
        btnModifyRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyRatingsActionPerformed(evt);
            }
        });
        pnlInternal.add(btnModifyRatings);
        btnModifyRatings.setBounds(550, 420, 230, 20);

        getContentPane().add(pnlInternal);
        pnlInternal.setBounds(0, 0, 790, 510);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSetRegToFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetRegToFinActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.setPlayersRegStatus(alP, 'F');
    }//GEN-LAST:event_btnSetRegToFinActionPerformed

    private void btnSetRegToPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetRegToPreActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.setPlayersRegStatus(alP, 'P');
    }//GEN-LAST:event_btnSetRegToPreActionPerformed

    private void btnDecreaseRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecreaseRankActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.changePlayersRank(alP, -1);
    }//GEN-LAST:event_btnDecreaseRankActionPerformed

    private void btnIncreaseRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncreaseRankActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.changePlayersRank(alP, 1);
    }//GEN-LAST:event_btnIncreaseRankActionPerformed

    private void btnRemovePrePlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePrePlayersActionPerformed
        ArrayList<Player> alP;
        try {
            alP = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int nbP = 0;
        for (Player p: alP){
            if (p.getRegisteringStatus().compareTo("PRE") == 0) nbP++;
        }
        if (nbP == 0) {
            JOptionPane.showMessageDialog(this, "No player is in a preliminary status", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int response =  JOptionPane.showConfirmDialog(this, "" + nbP + " " + "players will be removed", "Message", JOptionPane.OK_CANCEL_OPTION);
        if (response == JOptionPane.OK_OPTION){
            int nbRemovedPlayers = 0;
            int nbNotRemovedPlayers = 0;
            for (Player p: alP){
                if (p.getRegisteringStatus().compareTo("PRE") == 0){
                    try {
                        tournament.removePlayer(p);
                        nbRemovedPlayers++;
                    } catch (RemoteException ex) {
                        Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TournamentException ex) {
                        nbNotRemovedPlayers++;
                        Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
            if (nbNotRemovedPlayers != 0){
                String strMessage;
                if (nbNotRemovedPlayers == 1) strMessage = "player could not be removed";
                else strMessage = "players could not be removed";
                        JOptionPane.showMessageDialog(this, "" + nbNotRemovedPlayers + strMessage,
                        "Message", JOptionPane.WARNING_MESSAGE);
            }
            if (nbRemovedPlayers > 0){
                this.tournamentChanged();
            }

        }
        
    }//GEN-LAST:event_btnRemovePrePlayersActionPerformed

    private void mniSortByRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSortByRankActionPerformed
        playersSortType = PlayerComparator.RANK_ORDER;
        pupRegisteredPlayers.setVisible(false);
        try{
            updatePnlRegisteredPlayers(tournament.playersList());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mniSortByRankActionPerformed

    private void mniSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSortByNameActionPerformed
        playersSortType = PlayerComparator.NAME_ORDER;
        pupRegisteredPlayers.setVisible(false);
        try{
            updatePnlRegisteredPlayers(tournament.playersList());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mniSortByNameActionPerformed

    private void tblRegisteredPlayersKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblRegisteredPlayersKeyTyped
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);

        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (evt.getKeyChar() == '+') this.changePlayersRank(alP, 1);
        else if (evt.getKeyChar() == '-') this.changePlayersRank(alP, -1);
        else if (evt.getKeyChar() == 'P' || evt.getKeyChar() == 'p') this.setPlayersRegStatus(alP, 'P');
        else if (evt.getKeyChar() == 'F' || evt.getKeyChar() == 'f') this.setPlayersRegStatus(alP, 'F');

    }//GEN-LAST:event_tblRegisteredPlayersKeyTyped

    /** changes rank of players in alP by deltaRank
     */
    private void changePlayersRank(ArrayList<Player> alP, int deltaRank){
        boolean bSomethingHasChanged = false;
        int confirm = JOptionPane.OK_OPTION;                
        if (alP.size() > 1) confirm = JOptionPane.showConfirmDialog(this, "Rank will be modified for " + alP.size() + " players", 
                "Message", JOptionPane.OK_CANCEL_OPTION);
        if (confirm == JOptionPane.OK_OPTION){
            try {
                for (Player p : alP){
                     p.setRank(p.getRank() + deltaRank);
                     tournament.modifyPlayer(p, p);
                }
            } catch (RemoteException ex) {
                Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TournamentException ex) {
                Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
            bSomethingHasChanged = true;  
        }
        
        if (bSomethingHasChanged){
            this.tournamentChanged();
        }
    }
    
    /** 
     * changes rank of players according to rating
     */
    private void setPlayersRanksFromRatings(ArrayList<Player> alP){
        int nbChanged = 0;
        
        for (Player p : alP){
            int rating = p.getRating();
            int newRank = Player.rankFromRating(rating);
            if (p.getRank() != newRank)
                nbChanged++;
        }
        int confirm;                
        String str = "Rank will be changed for " + nbChanged + " players";
        confirm = JOptionPane.showConfirmDialog(this, str, 
                "Message", JOptionPane.OK_CANCEL_OPTION);
        if (confirm != JOptionPane.OK_OPTION) return;

        boolean bSomethingHasChanged = false;
        try {
            for (Player p : alP){
                int rating = p.getRating();
                int newRank = Player.rankFromRating(rating);
                p.setRank(newRank);
                tournament.modifyPlayer(p, p);
                bSomethingHasChanged = true;  
            }
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TournamentException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (bSomethingHasChanged){
            this.tournamentChanged();
        }
    }
    
    /** 
     * changes rank of players according to rating
     */
    private void setPlayersRatingsFromRanks(ArrayList<Player> alP){
        int nbChanged = 0;
        
        for (Player p : alP){
            int rank = p.getRank();
            int newRating = Player.ratingFromRank(rank);
            if (p.getRating() != newRating)
                nbChanged++;
        }
        int confirm;                
        String str = "Rating will be changed for " + nbChanged + " players";
        confirm = JOptionPane.showConfirmDialog(this, str, 
                "Message", JOptionPane.OK_CANCEL_OPTION);
        if (confirm != JOptionPane.OK_OPTION) return;

        boolean bSomethingHasChanged = false;
        try {
            for (Player p : alP){
                int rank = p.getRank();
                int newRating = Player.ratingFromRank(rank);
                if (p.getRating() != newRating){
                    p.setRating(newRating);
                    tournament.modifyPlayer(p, p);
                    bSomethingHasChanged = true;  
                }
            }
        
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TournamentException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (bSomethingHasChanged){
            this.tournamentChanged();
        }
    }


    /** 
     * changes rank of players according to rating
     */
    private void modifyRatings(ArrayList<Player> alP){
        int nb = alP.size();
        String plural = "";
        if (nb > 1) plural = "s";
        String str = "Rating will be increased/decreased for " + nb + " player" + plural;
        str+= "\nEnter the (+/-) modification value :";
        String strResponse =  JOptionPane.showInputDialog(this, str, "0");
        int delta;
        try{
            delta = Integer.parseInt(strResponse);
        }catch(Exception e){
            delta = 0;
        }
  
        if (delta == 0) return;

        boolean bSomethingHasChanged = false;
        try {
            for (Player p : alP){
                int newRating = p.getRating() + delta;
                p.setRating(newRating);
                tournament.modifyPlayer(p, p);
                bSomethingHasChanged = true;  
            }
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TournamentException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (bSomethingHasChanged){
            this.tournamentChanged();
        }
    }
    
    /** sets registration status of alP to newRegStatus
     */
    private void setPlayersRegStatus(ArrayList<Player> alP, char newRegStatus){
        boolean bSomethingHasChanged = false;
        if (newRegStatus == 'P'){
            int nbPlayersMod = 0;
            int nbPlayersPRE = 0;
            for (Player p : alP){
                if (p.getRegisteringStatus().compareTo("PRE") == 0) nbPlayersPRE++;
                else{
                    try {
                        if (!tournament.isPlayerImplied(p)){
                            p.setRegisteringStatus("PRE");
                            tournament.modifyPlayer(p, p);
                            nbPlayersMod++;
                        }
                    } catch (RemoteException ex) {
                        Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TournamentException ex) {
                        Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            int nbPlayersNotModifiable = alP.size() - nbPlayersPRE - nbPlayersMod;
            if (nbPlayersNotModifiable >= 1){
                String strMessage;
                if (nbPlayersNotModifiable == 1) strMessage = "player could not be changed because already assigned";
                else strMessage = "players could not be changed because already assigned";
                strMessage = "" + nbPlayersNotModifiable + " " + strMessage;
                JOptionPane.showMessageDialog(this, strMessage, "Message", JOptionPane.WARNING_MESSAGE);
            }
            if (nbPlayersMod != 0) bSomethingHasChanged = true;
        }
        if (newRegStatus == 'F'){
            int nbPlayersMod = 0;
            for (Player p : alP){
                if (p.getRegisteringStatus().compareTo("FIN") != 0){
                    p.setRegisteringStatus("FIN");
                    try {
                        tournament.modifyPlayer(p, p);
                    } catch (RemoteException ex) {
                        Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TournamentException ex) {
                        Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    nbPlayersMod++;
                }
            }
            if (nbPlayersMod != 0) bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            this.tournamentChanged();
        }
    }
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        cleanClose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void cleanClose(){
        running = false;
        dispose();
    }

    private void tblRegisteredPlayersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblRegisteredPlayersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE){
            ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
            if (alP.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                        JOptionPane.ERROR_MESSAGE); 
                return;
            }
 
            int nbJ = alP.size();
            String strMessage;
            if (nbJ == 1) strMessage = "player will be removed";
            else strMessage = "players will be removed";
            if (JOptionPane.showConfirmDialog(this, "" + nbJ + " " + strMessage, "Message",
                    JOptionPane.OK_CANCEL_OPTION) != JOptionPane.OK_OPTION) return;
            int nbPlayersRem = removePlayers(alP);
            int nbPlayersNotRem = alP.size() - nbPlayersRem;
            
            strMessage = "";
            int messageType = JOptionPane.INFORMATION_MESSAGE;
            if (nbPlayersNotRem >= 1){
                if (nbPlayersNotRem <= 1) strMessage = "player could not be removed";
                else strMessage = "players could not be removed";
                strMessage = nbPlayersNotRem + strMessage + "\n";
                messageType = JOptionPane.WARNING_MESSAGE;
            }
            if (nbPlayersRem == 1) strMessage += nbPlayersRem + " " + "player has been removed";
            else strMessage += nbPlayersRem + " " + "players have been removed";
            JOptionPane.showMessageDialog(this, strMessage, "Message", messageType);
            if (nbPlayersRem > 0){
                this.tournamentChanged();
            }
        }
    }//GEN-LAST:event_tblRegisteredPlayersKeyPressed

    private void tblRegisteredPlayersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegisteredPlayersMouseClicked
        // Left click on participation
        if (evt.getModifiers() == InputEvent.BUTTON1_MASK){
            int iRow = tblRegisteredPlayers.rowAtPoint(evt.getPoint());
            int iCol = tblRegisteredPlayers.columnAtPoint(evt.getPoint());
            if (iCol < PARTICIPATING_COL0) return;
            int round = iCol - PARTICIPATING_COL0 + displayedStartingRoundNumber;
            String name = (String)tblRegisteredPlayers.getModel().getValueAt(iRow, NAME_COL);
            String firstName = (String)tblRegisteredPlayers.getModel().getValueAt(iRow, FIRSTNAME_COL);
            Player p = null;
            try {
                p = tournament.getPlayerByKeyString(name + firstName);
            } catch (RemoteException ex) {
                Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean part[] = p.getParticipating();
            boolean bP = part[round];
            boolean bImplied = false;
            try {
                bImplied = tournament.isPlayerImpliedInRound(p, round);
            } catch (RemoteException ex) {
                Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
            }

            
            if (!bImplied){
                p.setParticipating(round, !bP);
                String strPart = "";
                if (bP) strPart = "V";
                DefaultTableModel model = (DefaultTableModel)tblRegisteredPlayers.getModel();
                model.setValueAt(strPart, iRow, iCol);
            }
            this.tournamentChanged();
            
        }
        // Right click
        if (evt.getModifiers() != InputEvent.BUTTON3_MASK) return;
        Point p = evt.getLocationOnScreen();
        pupRegisteredPlayers.setLocation(p);
        pupRegisteredPlayers.setVisible(true);     
        
    }//GEN-LAST:event_tblRegisteredPlayersMouseClicked

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        TournamentPrinting.printPlayersList(tournament, playersSortType);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        Gotha.displayGothaHelp("Players Quick check frame");
}//GEN-LAST:event_btnHelpActionPerformed

    private void mniCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCancelActionPerformed
        this.pupRegisteredPlayers.setVisible(false);
        this.tblRegisteredPlayers.removeRowSelectionInterval(0, tblRegisteredPlayers.getRowCount() - 1);
}//GEN-LAST:event_mniCancelActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
         this.pupRegisteredPlayers.setVisible(false);
    }//GEN-LAST:event_formWindowClosed

    private void btnSetRanksFromRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetRanksFromRatingsActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.setPlayersRanksFromRatings(alP);

    }//GEN-LAST:event_btnSetRanksFromRatingsActionPerformed

    private void btnSetRatingsFromRanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetRatingsFromRanksActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.setPlayersRatingsFromRanks(alP);
        
    }//GEN-LAST:event_btnSetRatingsFromRanksActionPerformed

    private void btnUpdateRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRatingsActionPerformed
        try {
            JFrame jfr = new JFrUpdateRatings(tournament);
            jfr.setVisible(true);
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }//GEN-LAST:event_btnUpdateRatingsActionPerformed

    private void btnModifyRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyRatingsActionPerformed
        ArrayList<Player> alP = this.selectedPlayersList(this.tblRegisteredPlayers);
        // Keep a track of selected Players
        alSelectedPlayersToKeepSelected = new ArrayList<Player>(alP);
        
        if (alP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please, select at least one player", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.modifyRatings(alP);
        
    }//GEN-LAST:event_btnModifyRatingsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cleanClose();
    }//GEN-LAST:event_formWindowClosing

    private void spnDisplayedStartingRoundNumberStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnDisplayedStartingRoundNumberStateChanged
        int demandedRN = (Integer) (spnDisplayedStartingRoundNumber.getValue()) - 1;
        this.demandedDisplayedRoundNumberHasChanged(demandedRN);        // TODO add your handling code here:
    }//GEN-LAST:event_spnDisplayedStartingRoundNumberStateChanged

    private void demandedDisplayedRoundNumberHasChanged(int demandedRN) {
        int numberOfRounds = 0;
        try {
            numberOfRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (demandedRN == displayedStartingRoundNumber) {
            return;
        }

        if (demandedRN < 0) {
            spnDisplayedStartingRoundNumber.setValue(displayedStartingRoundNumber + 1);
            return;
        }
        
        if (demandedRN >= numberOfRounds - MAX_NUMBER_OF_ROUNDS_DISPLAYED) {
            demandedRN = numberOfRounds -  MAX_NUMBER_OF_ROUNDS_DISPLAYED;
        }

        displayedStartingRoundNumber = demandedRN;
        updateAllViews();
    }
    
    private void customInitComponents()throws RemoteException{       
        initPnlRegisteredPlayers();
        this.updateAllViews();
    }
    
    private void initPnlRegisteredPlayers()throws RemoteException{
 
        TableColumnModel tcm = this.tblRegisteredPlayers.getColumnModel();
                
        JFrGotha.formatColumn(this.tblRegisteredPlayers, REG_COL, "R", 10, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(this.tblRegisteredPlayers, NAME_COL, "Last name",110, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(this.tblRegisteredPlayers, FIRSTNAME_COL, "First name", 80, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(this.tblRegisteredPlayers, COUNTRY_COL, "Co", 30, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(this.tblRegisteredPlayers, CLUB_COL, "Club", 40, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(this.tblRegisteredPlayers, RANK_COL, "Rk", 30, JLabel.RIGHT, JLabel.RIGHT); 
        JFrGotha.formatColumn(this.tblRegisteredPlayers, RATING_COL, "Rating", 40, JLabel.RIGHT, JLabel.RIGHT); 
        for (int r=0; r < MAX_NUMBER_OF_ROUNDS_DISPLAYED; r++){
            JFrGotha.formatColumn(this.tblRegisteredPlayers, PARTICIPATING_COL0 + r, "" + (r + 1), 15, JLabel.CENTER, JLabel.CENTER); 
            }

    }
    
    private void tournamentChanged(){
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateAllViews();
    }

    private void updateAllViews(){
        try {
            if (!tournament.isOpen()) cleanClose();
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Players Quick check. " + tournament.getFullName());        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.pnlInternal.setVisible(true);

        updateComponents();
        
    }        

    private void updateComponents(){
        ArrayList<Player> playersList = null;
        try {
            playersList = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        updatePnlRegisteredPlayers(playersList);
    }
    
    private void updatePnlRegisteredPlayers(ArrayList<Player> playersList){
        this.pnlPlayersList.setVisible(true);

        int nbPreliminary = 0;
        int nbFinal = 0;
        for (Player p : playersList){
            if (p.getRegisteringStatus().compareTo("PRE") == 0) nbPreliminary++;
            if (p.getRegisteringStatus().compareTo("FIN") == 0) nbFinal++;
        }
        txfNbPlPre.setText(""+ nbPreliminary);
        txfNbPlFin.setText(""+ nbFinal);
        
        DefaultTableModel model = (DefaultTableModel)tblRegisteredPlayers.getModel();
     
        ArrayList<Player> displayedPlayersList = new ArrayList<Player>(playersList);
        
        PlayerComparator playerComparator = new PlayerComparator(playersSortType);
        Collections.sort(displayedPlayersList, playerComparator);

        model.setRowCount(displayedPlayersList.size());
        
        int numberOfRounds = 0;
        try {
            numberOfRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int lastRoundDisplayed = displayedStartingRoundNumber + MAX_NUMBER_OF_ROUNDS_DISPLAYED - 1;    
        if (lastRoundDisplayed >= numberOfRounds){
            lastRoundDisplayed = numberOfRounds - 1;
        }
        if (displayedStartingRoundNumber != lastRoundDisplayed - MAX_NUMBER_OF_ROUNDS_DISPLAYED + 1) 
            displayedStartingRoundNumber = lastRoundDisplayed - MAX_NUMBER_OF_ROUNDS_DISPLAYED + 1; 
        
        if (displayedStartingRoundNumber < 0) displayedStartingRoundNumber = 0; 
            
        this.spnDisplayedStartingRoundNumber.setValue(displayedStartingRoundNumber + 1);
   
        if (displayedStartingRoundNumber < lastRoundDisplayed)
            this.lblLastRound.setText("..." + (lastRoundDisplayed + 1));
        
        if (numberOfRounds > MAX_NUMBER_OF_ROUNDS_DISPLAYED) this.spnDisplayedStartingRoundNumber.setEnabled(true);
        else this.spnDisplayedStartingRoundNumber.setEnabled(false);
                
        TableColumnModel tcm = this.tblRegisteredPlayers.getColumnModel();        
        
        // New V3.45.02 : Trim nr of columns for participation
        int nbPartCol = MAX_NUMBER_OF_ROUNDS_DISPLAYED;
        if (nbPartCol > numberOfRounds) nbPartCol = numberOfRounds;
        for (int col = PARTICIPATING_COL0 + nbPartCol; col < PARTICIPATING_COL0 + MAX_NUMBER_OF_ROUNDS_DISPLAYED; col++){
            TableColumn tc = tcm.getColumn(col);
            tc.setMinWidth(0);
            tc.setMaxWidth(0);
        }
        for (int col = PARTICIPATING_COL0; col < PARTICIPATING_COL0 + MAX_NUMBER_OF_ROUNDS_DISPLAYED; col++){
            TableColumn tc = tcm.getColumn(col);
            tc.setMinWidth(0);
            tc.setMaxWidth(16);
        }
        
        for (int virtualR = 0; virtualR < nbPartCol; virtualR++){
            JFrGotha.formatColumn(this.tblRegisteredPlayers, PARTICIPATING_COL0 + virtualR, "" + (virtualR + displayedStartingRoundNumber + 1), 16, JLabel.LEFT, JLabel.LEFT); 
        }
        
        for (Player p:displayedPlayersList){
            int line = displayedPlayersList.indexOf(p); 
            model.setValueAt((p.getRegisteringStatus().compareTo("PRE")==0)?"P":"F", line, JFrPlayersQuickCheck.REG_COL);
            model.setValueAt(p.getName(), line, JFrPlayersQuickCheck.NAME_COL);
            model.setValueAt(p.getFirstName(), line, JFrPlayersQuickCheck.FIRSTNAME_COL);
            model.setValueAt(p.getCountry(), line, JFrPlayersQuickCheck.COUNTRY_COL);
            model.setValueAt(p.getClub(), line, JFrPlayersQuickCheck.CLUB_COL);           
            model.setValueAt(Player.convertIntToKD(p.getRank()), line, JFrPlayersQuickCheck.RANK_COL);
            model.setValueAt(p.getRating(), line, JFrPlayersQuickCheck.RATING_COL); 
            boolean[] bPart = p.getParticipating();
            for (int virtualR = 0; virtualR < nbPartCol; virtualR++){
                String strPart = "";
                if (bPart[virtualR + displayedStartingRoundNumber]) strPart = "V";
                model.setValueAt(strPart, line, JFrPlayersQuickCheck.PARTICIPATING_COL0 + virtualR); 
            }
        }
        
        
        for (int nCol = 0; nCol < this.tblRegisteredPlayers.getColumnCount(); nCol++){
            TableColumn col = tblRegisteredPlayers.getColumnModel().getColumn(nCol);
            col.setCellRenderer(new PlayersQCTableCellRenderer());
        }
        
        // Reselect players that may have been deselected by this update
        for (Player p:alSelectedPlayersToKeepSelected){
            int iSel = displayedPlayersList.indexOf(p);
            if ( iSel >= 0) tblRegisteredPlayers.addRowSelectionInterval(iSel, iSel);
        }

    }
    
    private ArrayList<Player> selectedPlayersList(JTable tbl){
        ArrayList<Player> alSelectedPlayers = new ArrayList<Player>();
       
        // gather selected players into alSelectedPlayers
        for ( int iRow = 0; iRow < tbl.getModel().getRowCount(); iRow++){
            if (tbl.isRowSelected(iRow)){
                String name = (String)tbl.getModel().getValueAt(iRow, NAME_COL);
                String firstName = (String)tbl.getModel().getValueAt(iRow, FIRSTNAME_COL);
                Player p = null;
                try {
                    p = tournament.getPlayerByKeyString(name + firstName);
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                }
                alSelectedPlayers.add(p);
            }
        }
        return alSelectedPlayers;
    }
       
    private int removePlayers(ArrayList<Player> alP){
        int nbPlayersRem = 0;
        for (Player p : alP){
            boolean b = false;
            try {
                b = tournament.isPlayerImplied(p);
            } catch (RemoteException ex) {
                Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (!b){
                try{
                    Player playerToRemove = tournament.getPlayerByKeyString(p.getName() + p.getFirstName());
                    if(tournament.removePlayer(playerToRemove)) nbPlayersRem++;
                } catch(TournamentException te){
                    JOptionPane.showMessageDialog(this, te.getMessage(), "Message", JOptionPane.ERROR_MESSAGE);
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
                
        return nbPlayersRem;
    }
       
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDecreaseRank;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnIncreaseRank;
    private javax.swing.JButton btnModifyRatings;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnRemovePrePlayers;
    private javax.swing.JButton btnSetRanksFromRatings;
    private javax.swing.JButton btnSetRatingsFromRanks;
    private javax.swing.JButton btnSetRegToFin;
    private javax.swing.JButton btnSetRegToPre;
    private javax.swing.JButton btnUpdateRatings;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JLabel lblLastRound;
    private javax.swing.JMenuItem mniCancel;
    private javax.swing.JMenuItem mniSortByName;
    private javax.swing.JMenuItem mniSortByRank;
    private javax.swing.JPanel pnlInternal;
    private javax.swing.JPanel pnlPlayersList;
    private javax.swing.JPopupMenu pupRegisteredPlayers;
    private javax.swing.JScrollPane scpRegisteredPlayers;
    private javax.swing.JSpinner spnDisplayedStartingRoundNumber;
    private javax.swing.JTable tblRegisteredPlayers;
    private javax.swing.JTextField txfNbPlFin;
    private javax.swing.JTextField txfNbPlPre;
    // End of variables declaration//GEN-END:variables
}

class PlayersQCTableCellRenderer extends JLabel implements TableCellRenderer {
    // This method is called each time a cell in a column
    // using this renderer needs to be rendered.
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
        boolean isSelected, boolean hasFocus, int rowIndex, int colIndex) {
                
        Component comp = new DefaultTableCellRenderer().getTableCellRendererComponent(table,  value, isSelected, hasFocus, rowIndex, colIndex);
        TableModel model = table.getModel();
        String strRegStatus = "" + model.getValueAt(rowIndex, JFrPlayersQuickCheck.REG_COL);

        if (strRegStatus.compareTo("P") == 0) comp.setForeground(Color.RED);
        else comp.setForeground(Color.BLACK);
                
        return comp;
    }
}

