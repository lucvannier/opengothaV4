/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package info.vannier.gotha;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luc
 */
public class JFrPlayersBZG extends javax.swing.JFrame {
    private TournamentInterface tournament;
//    private GeneralParameterSet gps;
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;
    private final static int GROUP_COL = 0;
    private final static int NAME_COL = 1;
    private final static int FIRSTNAME_COL = 2;
    private final static int RANK_COL = 3;
    private final static int CORR_COL = 4;
    private final static int RATING_COL = 5;


    /**
     * Creates new form JFrPlayersBZH
     */
    public JFrPlayersBZG() {
        initComponents();
    }
    
    private volatile boolean running = true;
    javax.swing.Timer timer = null;
    private void setupRefreshTimer() {
        ActionListener taskPerformer;
        taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (!running){
                    timer.stop();
                }
                try {
                    if (!tournament.isOpen()) cleanClose();
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrGamesResults.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        timer = new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer);
        timer.start();
    }

    public JFrPlayersBZG(TournamentInterface tournament) throws RemoteException{
        this.tournament = tournament;
        
        initComponents();
        customInitComponents();
        setupRefreshTimer();
    }   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pupPlayers = new javax.swing.JPopupMenu();
        mniUpgrade = new javax.swing.JMenuItem();
        mniDowngrade = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniCancel = new javax.swing.JMenuItem();
        pnlInternal = new javax.swing.JPanel();
        btnHelp = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        pnlBZHGroups = new javax.swing.JPanel();
        scpPlayers = new javax.swing.JScrollPane();
        tblPlayers = new javax.swing.JTable();
        pnlGroups = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        txfNumberOfBZHGroups = new javax.swing.JTextField();
        btnBalanceGroups = new javax.swing.JButton();
        btnResetOnRk = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();

        mniUpgrade.setText("Upgrade");
        mniUpgrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpgradeActionPerformed(evt);
            }
        });
        pupPlayers.add(mniUpgrade);

        mniDowngrade.setText("Downgrade");
        mniDowngrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDowngradeActionPerformed(evt);
            }
        });
        pupPlayers.add(mniDowngrade);
        pupPlayers.add(jSeparator1);

        mniCancel.setText("Cancel");
        mniCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCancelActionPerformed(evt);
            }
        });
        pupPlayers.add(mniCancel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        pnlInternal.setLayout(null);

        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.png"))); // NOI18N
        btnHelp.setText("help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        pnlInternal.add(btnHelp);
        btnHelp.setBounds(20, 530, 110, 30);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        pnlInternal.add(btnClose);
        btnClose.setBounds(150, 530, 180, 30);

        pnlBZHGroups.setBorder(javax.swing.BorderFactory.createTitledBorder("Breizh Groups"));
        pnlBZHGroups.setLayout(null);

        scpPlayers.setBorder(javax.swing.BorderFactory.createTitledBorder("Players"));

        tblPlayers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Group", "Last name", "First name", "Rank", "Corr", "Rating"
            }
        ));
        tblPlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPlayersMouseClicked(evt);
            }
        });
        scpPlayers.setViewportView(tblPlayers);

        pnlBZHGroups.add(scpPlayers);
        scpPlayers.setBounds(245, 40, 380, 380);

        pnlGroups.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Groups"));
        pnlGroups.setLayout(null);

        jLabel43.setText("Number of groups");
        pnlGroups.add(jLabel43);
        jLabel43.setBounds(10, 30, 140, 14);

        jLabel44.setText("Lower limits :");
        pnlGroups.add(jLabel44);
        jLabel44.setBounds(10, 70, 100, 14);

        txfNumberOfBZHGroups.setText("1");
        txfNumberOfBZHGroups.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNumberOfBZHGroupsFocusLost(evt);
            }
        });
        pnlGroups.add(txfNumberOfBZHGroups);
        txfNumberOfBZHGroups.setBounds(160, 30, 20, 20);

        btnBalanceGroups.setText("Balance groups");
        btnBalanceGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBalanceGroupsActionPerformed(evt);
            }
        });
        pnlGroups.add(btnBalanceGroups);
        btnBalanceGroups.setBounds(10, 350, 180, 23);

        pnlBZHGroups.add(pnlGroups);
        pnlGroups.setBounds(10, 40, 200, 380);

        btnResetOnRk.setText("Reset All SBZS according to rank");
        btnResetOnRk.setToolTipText("SMMS will be reset on a \"1D = 1D => SMMS = 30 \" basis");
        btnResetOnRk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetOnRkActionPerformed(evt);
            }
        });
        pnlBZHGroups.add(btnResetOnRk);
        btnResetOnRk.setBounds(250, 460, 370, 30);

        pnlInternal.add(pnlBZHGroups);
        pnlBZHGroups.setBounds(10, 10, 770, 510);
        pnlInternal.add(jScrollPane2);
        jScrollPane2.setBounds(210, 180, 2, 2);

        getContentPane().add(pnlInternal);
        pnlInternal.setBounds(0, 0, 990, 660);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customInitComponents()throws RemoteException{       
        int labelLeft = 30;
        int labelTop = 100;
        int labelWidth = 80;
        int labelHeight = 20;
        int labelHeightGap = 25;
        
        int lowerLimtxfLeft = labelLeft + labelWidth;
        int lowerLimtxfWidth = 40;
        
        int nbOfGLblLeft = lowerLimtxfLeft + lowerLimtxfWidth;
        int nbOfGLblWidth = 30;
        
        
        int nbMaxBZG = Gotha.MAX_NUMBER_OF_BZHGROUPS;
        tabLblBZG = new JLabel[nbMaxBZG];
        tabTxfLowerLimitOfBZG = new JTextField[nbMaxBZG];
        tabLblNbPlayersOfBZG = new JLabel[nbMaxBZG];
        for (int bg = 0; bg < nbMaxBZG; bg++){
            tabLblBZG[bg] = new JLabel("Group " + (bg + 1));
            tabTxfLowerLimitOfBZG[bg] = new JTextField("30K");
            tabLblNbPlayersOfBZG[bg] = new JLabel(" 0");
            tabLblBZG[bg].setBounds(labelLeft, labelTop + bg * labelHeightGap, labelWidth, labelHeight);
            tabTxfLowerLimitOfBZG[bg].setBounds(lowerLimtxfLeft, labelTop + bg * labelHeightGap, lowerLimtxfWidth, labelHeight);
            tabLblNbPlayersOfBZG[bg].setBounds(nbOfGLblLeft, labelTop + bg * labelHeightGap, nbOfGLblWidth, labelHeight);
            pnlGroups.add(tabLblBZG[bg]);
            pnlGroups.add(tabTxfLowerLimitOfBZG[bg]);
            pnlGroups.add(tabLblNbPlayersOfBZG[bg]);
            tabTxfLowerLimitOfBZG[bg].addFocusListener(new java.awt.event.FocusAdapter() {
                @Override
                public void focusLost(java.awt.event.FocusEvent evt) {
                    tabTxfLowerLimitOfBZGFocusLost(evt);
                }
            });

        }
        initColumnHeaders(this.tblPlayers);

        updateAllViews();
        // updateComponents();
    }
    
    private void tabTxfLowerLimitOfBZGFocusLost(java.awt.event.FocusEvent evt) {        
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        
        for (int bg = 0; bg < this.tabTxfLowerLimitOfBZG.length; bg++){
            if (evt.getSource() == tabTxfLowerLimitOfBZG[bg]){
                int newLowerLimit = Player.convertKDPToInt(tabTxfLowerLimitOfBZG[bg].getText());
                int oldLowerLimit = gps.getLowerBZHGroupLimits()[bg];
                if (newLowerLimit < -30) {
                    this.updateAllViews();
                    return;
                }
                if (newLowerLimit == oldLowerLimit) return;
                int[] newTabTxfLowerLimitOfBZG = gps.getLowerBZHGroupLimits();
                newTabTxfLowerLimitOfBZG[bg] = newLowerLimit;
                for (int cc = 0; cc < bg; cc++) 
                    if (newTabTxfLowerLimitOfBZG[cc] < newLowerLimit) newTabTxfLowerLimitOfBZG[cc] = newLowerLimit;
                for (int cc = bg; cc < newTabTxfLowerLimitOfBZG.length; cc++) 
                    if (newTabTxfLowerLimitOfBZG[cc] > newLowerLimit) newTabTxfLowerLimitOfBZG[cc] = newLowerLimit;
                gps.setLowerBZHGroupLimits(newTabTxfLowerLimitOfBZG);
                tps.setGeneralParameterSet(gps);
            }                
        }
    
        try {
            tournament.setTournamentParameterSet(tps);
            resetCorrectionsToMin(gps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }      

    }

    private void initColumnHeaders(JTable table){
        JFrGotha.formatColumn(table, GROUP_COL, "Group name", 80, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(table, NAME_COL, "Last name", 100, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(table, FIRSTNAME_COL, "First name", 60, JLabel.LEFT, JLabel.LEFT); 
        JFrGotha.formatColumn(table, RANK_COL, "Rk", 40, JLabel.RIGHT, JLabel.RIGHT); 
        JFrGotha.formatColumn(table, CORR_COL, "Corr", 30, JLabel.RIGHT, JLabel.RIGHT); 
        JFrGotha.formatColumn(table, RATING_COL, "Rating", 50, JLabel.RIGHT, JLabel.RIGHT);     
    }
    
    private void updateAllViews(){
        try {
            if (!tournament.isOpen()) cleanClose();
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Breizh Groups. " + tournament.getFullName());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersMMG.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        updateComponents();
    }
    
    private void updateComponents(){
        TournamentParameterSet tps = null;
        ArrayList<Player> alPlayers = null;
        try {
            tps = tournament.getTournamentParameterSet();
            alPlayers = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersMMG.class.getName()).log(Level.SEVERE, null, ex);
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        if(tps.tournamentType() != TournamentParameterSet.TYPE_BREIZH){
            cleanClose();
            return;
        }
        
        pnlInternal.setVisible(true);
                
        
        updatePnlBZHGroups(alPlayers, this.tblPlayers);
    }
    
    private void updatePnlBZHGroups(ArrayList<Player> alP, JTable tblP){
        updatePnlGroups(alP);
        fillPlayersTable(alP, this.tblPlayers);               
    }

    private void updatePnlGroups(ArrayList<Player> alP){
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        int nbBZG = gps.getNumberOfBZHGroups();
        this.txfNumberOfBZHGroups.setText("" + nbBZG); 
       
        int nbMaxBZG = Gotha.MAX_NUMBER_OF_BZHGROUPS;
        for (int bg = 0; bg < nbBZG; bg++){
            tabLblBZG[bg].setText("Group " + (bg + 1)); 
            tabLblBZG[bg].setVisible(true);
            tabTxfLowerLimitOfBZG[bg].setVisible(true);
            tabLblNbPlayersOfBZG[bg].setVisible(true);
            int niv = -30;
            if (bg < nbBZG - 1){
                niv = gps.getLowerBZHGroupLimits()[bg];
                tabTxfLowerLimitOfBZG[bg].setEnabled(true);
            }
            else{
                niv = -30;
                tabTxfLowerLimitOfBZG[bg].setEnabled(false);
            }
            String strNiv = Player.convertIntToKD(niv);
            tabTxfLowerLimitOfBZG[bg].setText(strNiv);  
            
            int nbPlayersOfBZG = 0;
            try {
                nbPlayersOfBZG = tournament.numberOfPlayersInBZHGroup(bg, alP);
            } catch (RemoteException ex) {
                Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.tabLblNbPlayersOfBZG[bg].setText("  " + nbPlayersOfBZG);
        }
        
        for (int bg = nbBZG; bg < nbMaxBZG; bg++){
            tabLblBZG[bg].setVisible(false);
            tabTxfLowerLimitOfBZG[bg].setVisible(false);
            tabLblNbPlayersOfBZG[bg].setVisible(false);
        }

        for (int bg = 0; bg < nbBZG; bg++){
            if (bg < nbBZG -1){
                tabTxfLowerLimitOfBZG[bg].addFocusListener(new java.awt.event.FocusAdapter() {
                    @Override
                    public void focusLost(java.awt.event.FocusEvent evt) {
                            tabTxfLowerLimitOfBZGFocusLost(evt);
                    }
                });
            }

        }          
                
    }
    
    private void fillPlayersTable(ArrayList<Player> alP, JTable tblP){
        if (alP.size() <= 0) return;
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        DefaultTableModel model = (DefaultTableModel)tblP.getModel();       
        while (model.getRowCount() > 0) model.removeRow(model.getRowCount()-1);
        ArrayList<Player> alDP = new ArrayList<Player>(alP); // Displayed players
        PlayerComparator playerComparator = new PlayerComparator(PlayerComparator.SBZS_RATING_ORDER);
        Collections.sort(alDP, playerComparator);
        Player p0 = alDP.get(0);
        int oldBGN = -1;

        for(Player p : alDP){            
            Vector<String> row = new Vector<String>();
            int bgN;
            for (bgN = 0; bgN <gps.getNumberOfBZHGroups() - 1; bgN++ ){
                int newSBZS = p.getRank() + p.getSmmbzsCorrection();
                if(newSBZS >= gps.getLowerBZHGroupLimits()[bgN]) break;
            }
           if (bgN != oldBGN){
               row.add ("Group " + (bgN + 1));
               oldBGN = bgN;
           }
           else{
               row.add ("");
           }
           row.add(p.getName());
           row.add(p.getFirstName());
           row.add(Player.convertIntToKD(p.getRank()));
           row.add("" + p.getSmmbzsCorrection());
           row.add("" + p.getRating());
           model.addRow(row);
        }
    }


    private void btnResetOnRkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetOnRkActionPerformed
        ArrayList<Player> alPlayers = null;
        try {
            alPlayers = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersMMG.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        for (Player p : alPlayers){
            p.setSmmbzsCorrection(0);
            try {
                tournament.modifyPlayer(p, p);
            } catch (RemoteException ex) {
                Logger.getLogger(JFrPlayersMMG.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TournamentException ex) {
                Logger.getLogger(JFrPlayersMMG.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        this.tournamentChanged();
    }//GEN-LAST:event_btnResetOnRkActionPerformed

        private void tournamentChanged(){
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersMMG.class.getName()).log(Level.SEVERE, null, ex);
        }

        updateAllViews();
    }

    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cleanClose();
    }//GEN-LAST:event_formWindowClosing

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        Gotha.displayGothaHelp("Breizh groups frame");
    }//GEN-LAST:event_btnHelpActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        cleanClose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void txfNumberOfBZHGroupsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfNumberOfBZHGroupsFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        int oldNbBZHGroups = gps.getNumberOfBZHGroups();
        int newNbBZHGroups = -1;
        try {
            newNbBZHGroups = Integer.parseInt(this.txfNumberOfBZHGroups.getText());
        } catch (NumberFormatException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (newNbBZHGroups <= 0 || newNbBZHGroups > Gotha.MAX_NUMBER_OF_BZHGROUPS){
            this.txfNumberOfBZHGroups.setText("" + oldNbBZHGroups);
            return;
        }
        else{
            if (newNbBZHGroups == oldNbBZHGroups) return;
            gps.setNumberOfBZHGroups(newNbBZHGroups);
            int[] oldLowerBZHGroupLimits = gps.getLowerBZHGroupLimits();
            int[] newLowerBZHGroupLimits = new int[newNbBZHGroups - 1];
            
            for (int bg = 0; bg < newNbBZHGroups - 1; bg++ ){
                if (bg < oldNbBZHGroups - 1) newLowerBZHGroupLimits[bg] = oldLowerBZHGroupLimits[bg];
                else newLowerBZHGroupLimits[bg] = -30;
            }
            gps.setLowerBZHGroupLimits(newLowerBZHGroupLimits);
            tps.setGeneralParameterSet(gps);
            try {
                tournament.setTournamentParameterSet(tps);
                resetCorrectionsToMin(gps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_txfNumberOfBZHGroupsFocusLost

    private void btnBalanceGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBalanceGroupsActionPerformed
    TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        int[] lowLimits = balanceGroups(gps);        
        gps.setLowerBZHGroupLimits(lowLimits);
        resetCorrectionsToMin(gps);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
        }
        tournamentChanged();
    }//GEN-LAST:event_btnBalanceGroupsActionPerformed

    private void tblPlayersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPlayersMouseClicked
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        // Right click
        if (evt.getModifiers() != InputEvent.BUTTON3_MASK) return;
        Point p = evt.getLocationOnScreen();
        pupPlayers.setLocation(p);
        // What player ?
        int row = this.tblPlayers.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Please, select a player !");
            return;
        }
        Player playerInModification = getPlayerFromRow(row);
        String name = playerInModification.getName();
        String firstName = playerInModification.getFirstName();
        
        mniUpgrade.setText("Upgrade " + name + " " + firstName);
        mniDowngrade.setText("Downgrade " + name + " " + firstName);
        mniUpgrade.setEnabled(true);
        mniDowngrade.setEnabled(true);        
        int g = playerInModification.bzhGroup(gps);
        int nbG = gps.getNumberOfBZHGroups();
        if (g == 0) mniUpgrade.setEnabled(false);
        if ( g == nbG - 1) mniDowngrade.setEnabled(false);
        pupPlayers.setVisible(true);
               
    }//GEN-LAST:event_tblPlayersMouseClicked
    
    private Player getPlayerFromRow(int row){
        String name = (String) this.tblPlayers.getModel().getValueAt(row, JFrPlayersBZG.NAME_COL);
        String firstName = (String) this.tblPlayers.getModel().getValueAt(row, JFrPlayersBZG.FIRSTNAME_COL);
        Player p = null;
        try {
            p = tournament.getPlayerByKeyString(name + firstName);
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersManager.class.getName()).log(Level.SEVERE, null, ex);
        }        
        return p;
    }
    
    private void mniUpgradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpgradeActionPerformed
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        pupPlayers.setVisible(false);
        int row = this.tblPlayers.getSelectedRow();
        Player p = getPlayerFromRow(row);
        upgradePlayer(p, gps);
        try {
            tournament.modifyPlayer(p,p);
        } catch (TournamentException | RemoteException ex) {
            Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
        }
        tournamentChanged();
    }//GEN-LAST:event_mniUpgradeActionPerformed

    private void upgradePlayer(Player p, GeneralParameterSet gps){
        int g = p.bzhGroup(gps);
        int newGroup = g - 1;
        setCorrection(p , newGroup, gps);
        resetCorrectionToMin(p, gps); 
    }
    
    private void mniDowngradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDowngradeActionPerformed
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        pupPlayers.setVisible(false);
        int row = this.tblPlayers.getSelectedRow();
        Player p = getPlayerFromRow(row);
        downgradePlayer(p, gps);
        try {
            tournament.modifyPlayer(p,p);
        } catch (TournamentException | RemoteException ex) {
            Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
        }        
        tournamentChanged();
    }//GEN-LAST:event_mniDowngradeActionPerformed
    
    private void downgradePlayer(Player p, GeneralParameterSet gps){
        int g = p.bzhGroup(gps);
        int newGroup = g + 1;
        setCorrection(p , newGroup, gps); 
        resetCorrectionToMin(p, gps); 
    }

    private void resetCorrectionsToMin(GeneralParameterSet gps){
        ArrayList<Player> alPlayers = null;
        try {
            alPlayers = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Player p : alPlayers){
            resetCorrectionToMin(p, gps);       
        }
    }   

    private void resetCorrectionToMin(Player p, GeneralParameterSet gps){
        int nbG = gps.getNumberOfBZHGroups();

        int g = p.bzhGroup(gps);
        int lowLimit = Gotha.MIN_RANK;
        if (g < nbG -1) lowLimit = gps.getLowerBZHGroupLimits()[g];
        int highLimit = Gotha.MAX_RANK;
        if (g > 0) highLimit = gps.getLowerBZHGroupLimits()[g - 1] - 1;
        int rank = p.getRank();
        if (rank >= lowLimit && rank <= highLimit) p.setSmmbzsCorrection(0); 
        if (rank > highLimit) p.setSmmbzsCorrection(highLimit - rank);
        if (rank < lowLimit) p.setSmmbzsCorrection(lowLimit - rank);
    }
    
    private void setCorrection(Player p, int g, GeneralParameterSet gps){
        int rank = p.getRank();
        int nbG = gps.getNumberOfBZHGroups();
        int lowLimit = Gotha.MIN_RANK;
        if (g < nbG - 1) lowLimit = gps.getLowerBZHGroupLimits()[g];
        int highLimit = Gotha.MAX_RANK;
        if (g > 0) highLimit = gps.getLowerBZHGroupLimits()[g -1] -1;
        
        int corr = 0;
        if (rank < lowLimit) corr = lowLimit - rank;
        if (rank > highLimit) corr = highLimit - rank;
        
        p.setSmmbzsCorrection(corr); 
        
    }
    
    private void mniCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCancelActionPerformed
        pupPlayers.setVisible(false);
    }//GEN-LAST:event_mniCancelActionPerformed
    
    private int[] balanceGroups(GeneralParameterSet gps){
        int nbG = gps.getNumberOfBZHGroups();
        int[] lowLimits = new int[nbG - 1];
        
        int nbRemainingGroups = nbG;
        int nbRemainingPlayers = 0;
        try {
            nbRemainingPlayers = tournament.numberOfPlayersStrongerOrEqualTo(Gotha.MIN_RANK);
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
        }
        int bg = 0;
        while (bg < nbG - 1){
           if (nbRemainingPlayers <= 4){
               for (int g = bg; g < nbG -1; g++){
                   lowLimits[g] = Gotha.MIN_RANK;
               }
               break;
            }

            nbRemainingGroups = nbG - bg;
            int optGS = nbRemainingPlayers / nbRemainingGroups;
            if (optGS < 4) optGS = 4;
            int nbCandidates = 0;
            int topLimit = Gotha.MAX_RANK; 
            if (bg > 0){
                topLimit = lowLimits[bg - 1] - 1;
            }
            int candidateLowLimit = topLimit;
            for (int rank = candidateLowLimit; rank >= Gotha.MIN_RANK; rank --){
                try {
                    nbCandidates += tournament.numberOfPlayersWithRankEqualTo(rank);
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrPlayersBZG.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (nbCandidates >= optGS){
                    lowLimits[bg] = rank;
                    nbRemainingPlayers -= nbCandidates;
                    bg++;
                    break;
                }
             }         
        }
 
        return lowLimits;
        
    }
    private void cleanClose(){
        running = false;
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBalanceGroups;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnResetOnRk;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem mniCancel;
    private javax.swing.JMenuItem mniDowngrade;
    private javax.swing.JMenuItem mniUpgrade;
    private javax.swing.JPanel pnlBZHGroups;
    private javax.swing.JPanel pnlGroups;
    private javax.swing.JPanel pnlInternal;
    private javax.swing.JPopupMenu pupPlayers;
    private javax.swing.JScrollPane scpPlayers;
    private javax.swing.JTable tblPlayers;
    private javax.swing.JTextField txfNumberOfBZHGroups;
    // End of variables declaration//GEN-END:variables

JLabel[] tabLblBZG;
JTextField[] tabTxfLowerLimitOfBZG;
JLabel[] tabLblNbPlayersOfBZG;

}

